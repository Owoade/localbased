"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
class Db {
    constructor() {
        this.BASE_URL = 'localhost:2022';
        this.BASE_URL = this.BASE_URL;
    }
    getAll(collection_name) {
        return __awaiter(this, void 0, void 0, function* () {
            return new Promise((res, rej) => {
                fetch(`http://${this.BASE_URL}/get/${collection_name}/`)
                    .then(res => res.json())
                    .then(data => res(data))
                    .catch(err => rej(err));
            });
        });
    }
    getById(collection_name, id) {
        return __awaiter(this, void 0, void 0, function* () {
            return new Promise((res, rej) => {
                fetch(`http://${this.BASE_URL}/get/${collection_name}/${id}`)
                    .then(res => res.json())
                    .then(data => res(data))
                    .catch(err => rej(err));
            });
        });
    }
    post(collection_name, data) {
        return __awaiter(this, void 0, void 0, function* () {
            return new Promise((res, rej) => {
                fetch(`http://${this.BASE_URL}/create/${collection_name}`, {
                    method: "POST",
                    body: JSON.stringify({
                        data: data
                    }),
                    headers: {
                        "Content-type": "application/json; charset=UTF-8"
                    }
                })
                    .then(res => res.json())
                    .then(data => res(data))
                    .catch(err => rej(err));
            });
        });
    }
    update(collection_name, id, data) {
        return __awaiter(this, void 0, void 0, function* () {
            return new Promise((res, rej) => {
                fetch(`http://${this.BASE_URL}/update/${collection_name}/${id}`, {
                    method: "POST",
                    body: JSON.stringify({
                        data: data
                    }),
                    headers: {
                        "Content-type": "application/json; charset=UTF-8"
                    }
                })
                    .then(res => res.json())
                    .then(data => res(data))
                    .catch(err => rej(err));
            });
        });
    }
    getWithKey(collection_name, key) {
        return __awaiter(this, void 0, void 0, function* () {
            return new Promise((res, rej) => {
                fetch(`http://${this.BASE_URL}/get-with-key/${collection_name}`, {
                    method: "POST",
                    body: JSON.stringify({
                        data: key
                    }),
                    headers: {
                        "Content-type": "application/json; charset=UTF-8"
                    }
                })
                    .then(res => res.json())
                    .then(data => res(data))
                    .catch(err => rej(err));
            });
        });
    }
}
